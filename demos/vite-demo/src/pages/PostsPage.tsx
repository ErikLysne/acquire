import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import CircularProgress from "@mui/material/CircularProgress";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogTitle from "@mui/material/DialogTitle";
import Stack from "@mui/material/Stack";
import TextField from "@mui/material/TextField";
import Typography from "@mui/material/Typography";
import { useMutation, useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { createPost, getPosts } from "../api/post/postApi";
import { PostCard } from "../components/PostCard";

const PAGE_SIZE = 10;

export default function PostsPage() {
  const [page, setPage] = useState<number>(1);
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [title, setTitle] = useState<string>("");
  const [body, setBody] = useState<string>("");

  const {
    data: posts,
    refetch: refetchPosts,
    status: postStatus
  } = useQuery({
    queryFn: () =>
      getPosts({ page, limit: PAGE_SIZE, sort: "id", order: "desc" }),
    queryKey: ["posts", page]
  });

  const postsTotalCount = posts?.response.headers?.["x-total-count"];

  const createPostMutation = useMutation(createPost, {
    onSuccess: () => refetchPosts()
  });

  function handleAddPost() {
    createPostMutation.mutate({
      data: {
        body,
        title
      }
    });
    setTitle("");
    setBody("");
    setIsOpen(false);
  }

  return (
    <>
      <Box
        sx={{
          bgcolor: "grey.200",
          px: 4,
          pt: 6,
          pb: 4,
          mb: 4,
          display: "flex",
          flexDirection: "column",
          rowGap: 1
        }}
      >
        <Typography
          variant="h2"
          component="h1"
          color="grey.800"
          fontWeight="bold"
        >
          Acquire{" "}
          <Typography
            variant="h2"
            component="span"
            color="secondary.main"
            fontWeight="bold"
          >
            [DEMO]
          </Typography>
        </Typography>
        <Typography variant="body1" maxWidth={600}>
          This page demonstrates the mocking abilities of Acquire. The switch in
          the toolbar can be used to toggle mocking on and off. When mocking is
          disabled, data is fetched from the{" "}
          <a href="https://jsonplaceholder.typicode.com/">
            JSON Placeholder API
          </a>
          . When mocking is enabled, data is generated by Acquire.
        </Typography>
        <Typography variant="body2">
          Open developer tools and view the log ðŸªµ!
        </Typography>
        <Button
          variant="contained"
          onClick={() => setIsOpen(true)}
          sx={{
            my: 4,
            width: "100%",
            maxWidth: 300
          }}
        >
          Create Post
        </Button>
      </Box>

      <Stack spacing={2}>
        <Box
          sx={{
            mx: 2,
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center"
          }}
        >
          <Button
            variant="outlined"
            disabled={page <= 1}
            onClick={() => setPage((page) => page - 1)}
          >
            {`View previous ${PAGE_SIZE}`}
          </Button>

          <Button
            variant="outlined"
            disabled={page * PAGE_SIZE + 1 > postsTotalCount}
            onClick={() => setPage((page) => page + 1)}
          >
            {`View next ${PAGE_SIZE}`}
          </Button>
        </Box>

        {postStatus === "loading" ? (
          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "50px"
            }}
          >
            <CircularProgress />
          </Box>
        ) : (
          posts?.model.map((post) => (
            <PostCard
              key={post.id}
              id={post.id}
              userId={post.userId}
              title={post.title}
              body={post.body}
            />
          ))
        )}

        <Dialog open={isOpen} onClose={() => setIsOpen(false)}>
          <DialogTitle>Create a new post</DialogTitle>
          <DialogContent>
            <TextField
              autoFocus
              margin="dense"
              label="Title"
              fullWidth
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
            <TextField
              margin="dense"
              label="Body"
              fullWidth
              multiline
              minRows={4}
              value={body}
              onChange={(e) => setBody(e.target.value)}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setIsOpen(false)}>Cancel</Button>
            <Button onClick={handleAddPost} disabled={!title || !body}>
              Create
            </Button>
          </DialogActions>
        </Dialog>
      </Stack>
    </>
  );
}
